/*
 * -------------------------------------------------
 *  nf-core/neutronstar Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */



params {
    pipelineVersion = '1.0dev'
    mainScript = 'main.nf'
    nextflowVersion = '>=0.31.1'
    help = false
    outdir = './results'
    igenomes_base = "./iGenomes"
    tracedir = "${params.outdir}/pipeline_info"
    clusterOptions = false
    awsqueue = false
    awsregion = 'eu-west-1'
    email = false
    plaintext_email = false
    mqc_config = "$baseDir/misc/multiqc_config.yaml"
    minsize = 1000
    full_output = false
    BUSCOfolder = "$baseDir/data"
    test = false
    reads = false
    singleEnd = false
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nf-core/neutronstar_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nf-core/neutronstar_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nf-core/neutronstar_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nf-core/neutronstar_dag.svg"
}

profiles {

    standard {
        includeConfig 'conf/base.config'
    }
    test {
        includeConfig 'conf/test.config'
    }
    slurm {
        includeConfig 'conf/slurm.config'
    }
    singularity {
        includeConfig 'conf/singularity.config'
    }
    uppmax {
        includeConfig 'conf/hpc.config'
        includeConfig 'conf/uppmax.config'
        includeConfig 'conf/any_slurm.config'
    }
    uppmax_modules {
        includeConfig 'conf/hpc.config'
        includeConfig 'conf/uppmax_modules.config'
        includeConfig 'conf/any_slurm.config'
    }
    tegner {
        includeConfig 'conf/hpc.config'
        includeConfig 'conf/singularity.config'
        includeConfig 'conf/any_slurm.config'
        includeConfig 'conf/tegner.config'
    }

}


manifest {
  name = 'nf-core/neutronstar'
  description = 'De novo assembly pipeline for 10X linked-reads, used at the SciLifeLab National Genomics Infrastructure.'
  homePage = 'https://github.com/nf-core/neutronstar'
  // Delete when these things are implemented in nxf
  mainScript = params.mainScript
  nextflowVersion = params.nextflowVersion
  pipelineVersion = params.pipelineVersion
  version = params.pipelineVersion
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
